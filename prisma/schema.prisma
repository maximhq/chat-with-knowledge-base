// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Auth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  threads  Thread[]
  apiKeys  ApiKey[]
}

// Thread Management Module
model Thread {
  id        String   @id @default(cuid())
  title     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  documents Document[]

  @@index([userId, createdAt])
}

// Message Handling Module
model Message {
  id        String      @id @default(cuid())
  threadId  String
  content   String      @db.Text
  role      MessageRole
  createdAt DateTime    @default(now())

  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId, createdAt])
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

// File Upload Module
model Document {
  id           String     @id @default(cuid())
  filename     String
  originalName String
  mimeType     String
  size         Int
  threadId     String // Required - every document belongs to a thread
  status       FileStatus @default(PROCESSING)
  chunkCount   Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)

  @@index([threadId, status])
  @@index([threadId, createdAt])
}

enum FileStatus {
  PROCESSING
  READY
  ERROR
}

model ExternalLink {
  id        String   @id @default(cuid())
  url       String
  title     String?
  content   String?  @db.Text
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, createdAt])
}

// API Key Management
model ApiKey {
  id         String    @id @default(cuid())
  name       String // User-friendly name for the API key
  keyHash    String    @unique // Hashed version of the API key
  keyPrefix  String // First 8 characters for identification (e.g., "ak_12345678")
  userId     String
  isActive   Boolean   @default(true)
  lastUsedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@index([keyHash])
  @@index([keyPrefix])
}
